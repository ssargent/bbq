// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssargent/go-bbq/bbq (interfaces: DeviceService,DeviceRepository)

// Package mock_bbq is a generated GoMock package.
package mock_bbq

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	bbq "github.com/ssargent/go-bbq/bbq"
	reflect "reflect"
)

// MockDeviceService is a mock of DeviceService interface
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method
func (m *MockDeviceService) CreateDevice(arg0 uuid.UUID, arg1 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice
func (mr *MockDeviceServiceMockRecorder) CreateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceService)(nil).CreateDevice), arg0, arg1)
}

// DeleteDevice mocks base method
func (m *MockDeviceService) DeleteDevice(arg0 uuid.UUID, arg1 bbq.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice
func (mr *MockDeviceServiceMockRecorder) DeleteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceService)(nil).DeleteDevice), arg0, arg1)
}

// GetDevice mocks base method
func (m *MockDeviceService) GetDevice(arg0 uuid.UUID, arg1 string) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockDeviceServiceMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceService)(nil).GetDevice), arg0, arg1)
}

// GetDevices mocks base method
func (m *MockDeviceService) GetDevices(arg0 uuid.UUID) ([]bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", arg0)
	ret0, _ := ret[0].([]bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockDeviceServiceMockRecorder) GetDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockDeviceService)(nil).GetDevices), arg0)
}

// UpdateDevice mocks base method
func (m *MockDeviceService) UpdateDevice(arg0 uuid.UUID, arg1 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice
func (mr *MockDeviceServiceMockRecorder) UpdateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceService)(nil).UpdateDevice), arg0, arg1)
}

// MockDeviceRepository is a mock of DeviceRepository interface
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDeviceRepository) Create(arg0 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDeviceRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockDeviceRepository) Delete(arg0 bbq.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeviceRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceRepository)(nil).Delete), arg0)
}

// GetByTenantID mocks base method
func (m *MockDeviceRepository) GetByTenantID(arg0 uuid.UUID) ([]bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTenantID", arg0)
	ret0, _ := ret[0].([]bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTenantID indicates an expected call of GetByTenantID
func (mr *MockDeviceRepositoryMockRecorder) GetByTenantID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTenantID", reflect.TypeOf((*MockDeviceRepository)(nil).GetByTenantID), arg0)
}

// GetDevice mocks base method
func (m *MockDeviceRepository) GetDevice(arg0 uuid.UUID, arg1 string) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockDeviceRepositoryMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceRepository)(nil).GetDevice), arg0, arg1)
}

// Update mocks base method
func (m *MockDeviceRepository) Update(arg0 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDeviceRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceRepository)(nil).Update), arg0)
}
