// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssargent/bbq/bbq-apiserver/bbq (interfaces: DeviceRepository,MonitorRepository,DeviceService,MonitorService)

// Package mock_bbq is a generated GoMock package.
package mock_bbq

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	bbq "github.com/ssargent/bbq/bbq-apiserver/bbq"
	reflect "reflect"
)

// MockDeviceRepository is a mock of DeviceRepository interface
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDeviceRepository) Create(arg0 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDeviceRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockDeviceRepository) Delete(arg0 bbq.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeviceRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceRepository)(nil).Delete), arg0)
}

// GetByTenantID mocks base method
func (m *MockDeviceRepository) GetByTenantID(arg0 uuid.UUID) ([]bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTenantID", arg0)
	ret0, _ := ret[0].([]bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTenantID indicates an expected call of GetByTenantID
func (mr *MockDeviceRepositoryMockRecorder) GetByTenantID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTenantID", reflect.TypeOf((*MockDeviceRepository)(nil).GetByTenantID), arg0)
}

// GetDevice mocks base method
func (m *MockDeviceRepository) GetDevice(arg0 uuid.UUID, arg1 string) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockDeviceRepositoryMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceRepository)(nil).GetDevice), arg0, arg1)
}

// Update mocks base method
func (m *MockDeviceRepository) Update(arg0 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDeviceRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceRepository)(nil).Update), arg0)
}

// MockMonitorRepository is a mock of MonitorRepository interface
type MockMonitorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorRepositoryMockRecorder
}

// MockMonitorRepositoryMockRecorder is the mock recorder for MockMonitorRepository
type MockMonitorRepositoryMockRecorder struct {
	mock *MockMonitorRepository
}

// NewMockMonitorRepository creates a new mock instance
func NewMockMonitorRepository(ctrl *gomock.Controller) *MockMonitorRepository {
	mock := &MockMonitorRepository{ctrl: ctrl}
	mock.recorder = &MockMonitorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitorRepository) EXPECT() *MockMonitorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMonitorRepository) Create(arg0 bbq.Monitor) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMonitorRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMonitorRepository)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockMonitorRepository) Delete(arg0 bbq.Monitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMonitorRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonitorRepository)(nil).Delete), arg0)
}

// GetByAddress mocks base method
func (m *MockMonitorRepository) GetByAddress(arg0 uuid.UUID, arg1 string) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress
func (mr *MockMonitorRepositoryMockRecorder) GetByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockMonitorRepository)(nil).GetByAddress), arg0, arg1)
}

// GetByName mocks base method
func (m *MockMonitorRepository) GetByName(arg0 uuid.UUID, arg1 string) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockMonitorRepositoryMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockMonitorRepository)(nil).GetByName), arg0, arg1)
}

// GetByTenantID mocks base method
func (m *MockMonitorRepository) GetByTenantID(arg0 uuid.UUID) ([]bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTenantID", arg0)
	ret0, _ := ret[0].([]bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTenantID indicates an expected call of GetByTenantID
func (mr *MockMonitorRepositoryMockRecorder) GetByTenantID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTenantID", reflect.TypeOf((*MockMonitorRepository)(nil).GetByTenantID), arg0)
}

// Update mocks base method
func (m *MockMonitorRepository) Update(arg0 bbq.Monitor) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMonitorRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitorRepository)(nil).Update), arg0)
}

// MockDeviceService is a mock of DeviceService interface
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method
func (m *MockDeviceService) CreateDevice(arg0 uuid.UUID, arg1 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice
func (mr *MockDeviceServiceMockRecorder) CreateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDeviceService)(nil).CreateDevice), arg0, arg1)
}

// DeleteDevice mocks base method
func (m *MockDeviceService) DeleteDevice(arg0 uuid.UUID, arg1 bbq.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice
func (mr *MockDeviceServiceMockRecorder) DeleteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDeviceService)(nil).DeleteDevice), arg0, arg1)
}

// GetDevice mocks base method
func (m *MockDeviceService) GetDevice(arg0 uuid.UUID, arg1 string) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice
func (mr *MockDeviceServiceMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceService)(nil).GetDevice), arg0, arg1)
}

// GetDevices mocks base method
func (m *MockDeviceService) GetDevices(arg0 uuid.UUID) ([]bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices", arg0)
	ret0, _ := ret[0].([]bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockDeviceServiceMockRecorder) GetDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockDeviceService)(nil).GetDevices), arg0)
}

// UpdateDevice mocks base method
func (m *MockDeviceService) UpdateDevice(arg0 uuid.UUID, arg1 bbq.Device) (bbq.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0, arg1)
	ret0, _ := ret[0].(bbq.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice
func (mr *MockDeviceServiceMockRecorder) UpdateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockDeviceService)(nil).UpdateDevice), arg0, arg1)
}

// MockMonitorService is a mock of MonitorService interface
type MockMonitorService struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorServiceMockRecorder
}

// MockMonitorServiceMockRecorder is the mock recorder for MockMonitorService
type MockMonitorServiceMockRecorder struct {
	mock *MockMonitorService
}

// NewMockMonitorService creates a new mock instance
func NewMockMonitorService(ctrl *gomock.Controller) *MockMonitorService {
	mock := &MockMonitorService{ctrl: ctrl}
	mock.recorder = &MockMonitorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMonitorService) EXPECT() *MockMonitorServiceMockRecorder {
	return m.recorder
}

// CreateMonitor mocks base method
func (m *MockMonitorService) CreateMonitor(arg0 uuid.UUID, arg1 bbq.Monitor) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor
func (mr *MockMonitorServiceMockRecorder) CreateMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockMonitorService)(nil).CreateMonitor), arg0, arg1)
}

// DeleteMonitor mocks base method
func (m *MockMonitorService) DeleteMonitor(arg0 uuid.UUID, arg1 bbq.Monitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonitor indicates an expected call of DeleteMonitor
func (mr *MockMonitorServiceMockRecorder) DeleteMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockMonitorService)(nil).DeleteMonitor), arg0, arg1)
}

// GetMonitorByAddress mocks base method
func (m *MockMonitorService) GetMonitorByAddress(arg0 uuid.UUID, arg1 string) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorByAddress", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorByAddress indicates an expected call of GetMonitorByAddress
func (mr *MockMonitorServiceMockRecorder) GetMonitorByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorByAddress", reflect.TypeOf((*MockMonitorService)(nil).GetMonitorByAddress), arg0, arg1)
}

// GetMonitorByName mocks base method
func (m *MockMonitorService) GetMonitorByName(arg0 uuid.UUID, arg1 string) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorByName", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorByName indicates an expected call of GetMonitorByName
func (mr *MockMonitorServiceMockRecorder) GetMonitorByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorByName", reflect.TypeOf((*MockMonitorService)(nil).GetMonitorByName), arg0, arg1)
}

// GetMonitors mocks base method
func (m *MockMonitorService) GetMonitors(arg0 uuid.UUID) ([]bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitors", arg0)
	ret0, _ := ret[0].([]bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitors indicates an expected call of GetMonitors
func (mr *MockMonitorServiceMockRecorder) GetMonitors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitors", reflect.TypeOf((*MockMonitorService)(nil).GetMonitors), arg0)
}

// UpdateMonitor mocks base method
func (m *MockMonitorService) UpdateMonitor(arg0 uuid.UUID, arg1 bbq.Monitor) (bbq.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMonitor", arg0, arg1)
	ret0, _ := ret[0].(bbq.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMonitor indicates an expected call of UpdateMonitor
func (mr *MockMonitorServiceMockRecorder) UpdateMonitor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMonitor", reflect.TypeOf((*MockMonitorService)(nil).UpdateMonitor), arg0, arg1)
}
