// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bbq/intake/v1/intake_service.proto

package intakev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntakeService_Record_FullMethodName  = "/bbq.intake.v1.IntakeService/Record"
	IntakeService_Session_FullMethodName = "/bbq.intake.v1.IntakeService/Session"
)

// IntakeServiceClient is the client API for IntakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntakeServiceClient interface {
	Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
}

type intakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntakeServiceClient(cc grpc.ClientConnInterface) IntakeServiceClient {
	return &intakeServiceClient{cc}
}

func (c *intakeServiceClient) Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, IntakeService_Record_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intakeServiceClient) Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, IntakeService_Session_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntakeServiceServer is the server API for IntakeService service.
// All implementations must embed UnimplementedIntakeServiceServer
// for forward compatibility
type IntakeServiceServer interface {
	Record(context.Context, *RecordRequest) (*RecordResponse, error)
	Session(context.Context, *SessionRequest) (*SessionResponse, error)
	mustEmbedUnimplementedIntakeServiceServer()
}

// UnimplementedIntakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntakeServiceServer struct {
}

func (UnimplementedIntakeServiceServer) Record(context.Context, *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (UnimplementedIntakeServiceServer) Session(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedIntakeServiceServer) mustEmbedUnimplementedIntakeServiceServer() {}

// UnsafeIntakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntakeServiceServer will
// result in compilation errors.
type UnsafeIntakeServiceServer interface {
	mustEmbedUnimplementedIntakeServiceServer()
}

func RegisterIntakeServiceServer(s grpc.ServiceRegistrar, srv IntakeServiceServer) {
	s.RegisterService(&IntakeService_ServiceDesc, srv)
}

func _IntakeService_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntakeServiceServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntakeService_Record_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntakeServiceServer).Record(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntakeService_Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntakeServiceServer).Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntakeService_Session_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntakeServiceServer).Session(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntakeService_ServiceDesc is the grpc.ServiceDesc for IntakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bbq.intake.v1.IntakeService",
	HandlerType: (*IntakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _IntakeService_Record_Handler,
		},
		{
			MethodName: "Session",
			Handler:    _IntakeService_Session_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bbq/intake/v1/intake_service.proto",
}
