// @generated by protoc-gen-es v1.9.0 with parameter "target=js+dts"
// @generated from file bbq/intake/v1/bbq.proto (package bbq.intake.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bbq.intake.v1.Sensor
 */
export declare class Sensor extends Message<Sensor> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string manufacturer = 2;
   */
  manufacturer: string;

  /**
   * @generated from field: int32 sensor_count = 3;
   */
  sensorCount: number;

  /**
   * @generated from field: string temperature_unit = 4;
   */
  temperatureUnit: string;

  /**
   * @generated from field: string sensor_id = 5;
   */
  sensorId: string;

  constructor(data?: PartialMessage<Sensor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bbq.intake.v1.Sensor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sensor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sensor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sensor;

  static equals(a: Sensor | PlainMessage<Sensor> | undefined, b: Sensor | PlainMessage<Sensor> | undefined): boolean;
}

/**
 * @generated from message bbq.intake.v1.SensorReading
 */
export declare class SensorReading extends Message<SensorReading> {
  /**
   * @generated from field: int32 sensor_number = 1;
   */
  sensorNumber: number;

  /**
   * @generated from field: float temperature = 2;
   */
  temperature: number;

  constructor(data?: PartialMessage<SensorReading>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bbq.intake.v1.SensorReading";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SensorReading;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SensorReading;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SensorReading;

  static equals(a: SensorReading | PlainMessage<SensorReading> | undefined, b: SensorReading | PlainMessage<SensorReading> | undefined): boolean;
}

/**
 * @generated from message bbq.intake.v1.Reading
 */
export declare class Reading extends Message<Reading> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  /**
   * @generated from field: repeated bbq.intake.v1.SensorReading readings = 2;
   */
  readings: SensorReading[];

  /**
   * @generated from field: int64 recorded_at = 3;
   */
  recordedAt: bigint;

  constructor(data?: PartialMessage<Reading>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bbq.intake.v1.Reading";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reading;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reading;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reading;

  static equals(a: Reading | PlainMessage<Reading> | undefined, b: Reading | PlainMessage<Reading> | undefined): boolean;
}

/**
 * @generated from message bbq.intake.v1.SessionDataRate
 */
export declare class SessionDataRate extends Message<SessionDataRate> {
  /**
   * @generated from field: int32 sensors = 1;
   */
  sensors: number;

  /**
   * @generated from field: int32 max_readings_minute = 2;
   */
  maxReadingsMinute: number;

  constructor(data?: PartialMessage<SessionDataRate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bbq.intake.v1.SessionDataRate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionDataRate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionDataRate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionDataRate;

  static equals(a: SessionDataRate | PlainMessage<SessionDataRate> | undefined, b: SessionDataRate | PlainMessage<SessionDataRate> | undefined): boolean;
}

/**
 * @generated from message bbq.intake.v1.Session
 */
export declare class Session extends Message<Session> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * @generated from field: string desired_state = 3;
   */
  desiredState: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: int64 start_time = 5;
   */
  startTime: bigint;

  /**
   * @generated from field: optional int64 end_time = 6;
   */
  endTime?: bigint;

  /**
   * @generated from field: string sensor_id = 7;
   */
  sensorId: string;

  /**
   * @generated from field: string session_type = 8;
   */
  sessionType: string;

  /**
   * @generated from field: string subject_id = 9;
   */
  subjectId: string;

  constructor(data?: PartialMessage<Session>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "bbq.intake.v1.Session";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session;

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean;
}

